const fs = require('fs')
const path = require('path')
const {hmac} = require("../src");
const sm3 = require('../src/index').sm3
const hamc = require('../src/index').hmac

/**
 * 16 进制串转字节数组
 */
function hexToArray(str) {
    const arr = []
    for (let i = 0, len = str.length; i < len; i += 2) {
        arr.push(parseInt(str.substr(i, 2), 16))
    }
    return arr
}

test('sm3_hmac: must match the result', () => {
    //32字节输入
    let test1=hmac(hexToArray('0102030405060708010203040506070801020304050607080102030405060708')//input
               ,hexToArray('0102030405060708010203040506070801020304050607080102030405060708'));//key
    expect(test1).toBe('41e6589cde89b4f8c810a820c2fb6f0ad86bf2c136a19cfb3a5c0835f598e07b');

    //不固定长度输入
    let test2=hamc(hexToArray('313233343536'),hexToArray('31323334353637383930'));
    expect(test2).toBe('bc1f71eef901223ae7a9718e3ae1dbf97353c81acb429b491bbdbefd2195b95e')
    //64字节
    let test3=hamc(hexToArray('01020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708'),
        hexToArray('01020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708'));
    expect(test3).toBe('d6fb17c240930a21996373aa9fc0b1092931b016640809297911cd3f8cc9dcdd')
    //128字节
    let hex128='0102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708'
    let test4=hamc(hexToArray(hex128),
        hexToArray(hex128));
    expect(test4).toBe('d374f8adb0e9d1f12de94c1406fe8b2d53f84129e033f0d269400de8e8e7ca1a')

})